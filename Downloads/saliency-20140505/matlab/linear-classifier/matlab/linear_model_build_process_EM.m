% //////////////////////////////////////////////////////////////////// %
%           Surprise Linear Model - Copyright (C) 2004-2007            %
% by the University of Southern California (USC) and the iLab at USC.  %
% See http://iLab.usc.edu for information about this project.          %
% //////////////////////////////////////////////////////////////////// %
% This file is part of the iLab Neuromorphic Vision Toolkit            %
%                                                                      %
% The Surprise Linear Model is free software; you can                  %
% redistribute it and/or modify it under the terms of the GNU General  %
% Public License as published by the Free Software Foundation; either  %
% version 2 of the License, or (at your option) any later version.     %
%                                                                      %
% The Surprise Linear Model is distributed in the hope                 %
% that it will be useful, but WITHOUT ANY WARRANTY; without even the   %
% implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      %
% PURPOSE.  See the GNU General Public License for more details.       %
%                                                                      %
% You should have received a copy of the GNU General Public License    %
% along with the iBaysian Surprise Matlab Toolkit; if not, write       %
% to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,   %
% Boston, MA 02111-1307 USA.                                           %
% //////////////////////////////////////////////////////////////////// %
%
% Primary maintainer for this file: T. Nathan Mundhenk <mundhenk@usc.edu>
% $Revision: 55 $ 
% $Id$
% $HeadURL: https://surprise-mltk.svn.sourceforge.net/svnroot/surprise-mltk/source/surprise_toolkit/example_graph.m $

% X = LINEAR_MODEL_BUILD_PROCESS_EM(CONF)
% Use this function to build a new process_em.sh script given the
% paramers in CONF which is an object

function conf = linear_model_build_process_EM(conf,type)

dprint(['Making process-em.sh file - ' conf.procEM]); 

conf.body.timeStamp = clock;

header = print_header(conf);
footer = print_footer(conf);
body   = print_body(conf,type);

[emfile, rsvpmsg] = fopen(conf.procEM,'wt');
fcount            = fprintf(emfile, header);
fcount            = fprintf(emfile, body);
fcount            = fprintf(emfile, footer);
fclose(emfile);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function header = print_header(conf)

header = [ ...
'#!/bin/sh \n' ...
'\n' ...
'# Auto generated by linear_classify_build_process_em.m \n' ...
'# Created: ' date ' : ' ...
num2str(conf.body.timeStamp(1,4)) '.' num2str(conf.body.timeStamp(1,5)) '.' num2str(conf.body.timeStamp(1,6)) '\n'...
'# Do not edit this file directly \n' ...
'\n' ...
];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function footer = print_footer(conf)

footer = [ ...
'\n' ...
'#FOOTER' ...
];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function body = print_body(conf,type)

nodes   = ['nodes=\"' conf.nodes '\"\n'];

if(strcmp(type,'normal'))
    files = [conf.imageDir conf.imagePrefix];
elseif (strcmp(type,'hard'))
    files = [conf.hardDir conf.imagePrefix '_hard_post ' ...
             conf.hardDir conf.imagePrefix '_hard_pre ' ...
             conf.hardDir conf.imagePrefix '_hard_w '];
elseif(strcmp(type,'mask'))
    files = [conf.maskDir conf.imagePrefix];
elseif(strcmp(type,'trans_mask'))
    files = [conf.transMaskDir conf.imagePrefix];
elseif(strcmp(type,'trans'))
    files = [conf.transDir conf.imagePrefix];
elseif(strcmp(type,'hard_mask'))
    files = [conf.hardMaskDir conf.imagePrefix];
elseif(strcmp(type,'not-hard_mask'))
    files = [conf.notHardMaskDir conf.imagePrefix];  
elseif(strcmp(type,'AB'))
    files = [conf.ABDir conf.ABtype]; 
else
    error('Unknown type for run \"%s\" given',type);
end

if(isfield(conf,'runLocalOnly') && strcmp(conf.runLocalOnly,'yes'))
    command = [conf.beoqueue ' -sn \"$nodes\" ' conf.procRSVP ' ' files '\n'];
else
    command = [conf.beoqueue ' -n \"$nodes\" ' conf.procRSVP ' ' files '\n'];
end

body = [ ...
nodes ...
'\n' ...
command ...
];
