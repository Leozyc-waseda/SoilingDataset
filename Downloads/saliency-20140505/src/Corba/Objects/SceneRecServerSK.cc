// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "SceneRecServerSK.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



SceneRecServer_ptr SceneRecServer_Helper::_nil() {
  return ::SceneRecServer::_nil();
}

::CORBA::Boolean SceneRecServer_Helper::is_nil(::SceneRecServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void SceneRecServer_Helper::release(::SceneRecServer_ptr p) {
  ::CORBA::release(p);
}

void SceneRecServer_Helper::marshalObjRef(::SceneRecServer_ptr obj, cdrStream& s) {
  ::SceneRecServer::_marshalObjRef(obj, s);
}

SceneRecServer_ptr SceneRecServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::SceneRecServer::_unmarshalObjRef(s);
}

void SceneRecServer_Helper::duplicate(::SceneRecServer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

SceneRecServer_ptr
SceneRecServer::_duplicate(::SceneRecServer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

SceneRecServer_ptr
SceneRecServer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


SceneRecServer_ptr
SceneRecServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

SceneRecServer_ptr
SceneRecServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SceneRecServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SceneRecServer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SceneRecServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* SceneRecServer::_PD_repoId = "IDL:SceneRecServer:1.0";


_objref_SceneRecServer::~_objref_SceneRecServer() {

}


_objref_SceneRecServer::_objref_SceneRecServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::SceneRecServer::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
_objref_SceneRecServer::_ptrToObjRef(const char* id)
{
  if( id == ::SceneRecServer::_PD_repoId )
    return (::SceneRecServer_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::SceneRecServer::_PD_repoId) )
    return (::SceneRecServer_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cImageOrb
class _0RL_cd_c803e3f5fea6e958_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c803e3f5fea6e958_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  ImageOrb_var arg_0_;
  const ImageOrb* arg_0;
};

void _0RL_cd_c803e3f5fea6e958_00000000::marshalArguments(cdrStream& _n)
{
  (const ImageOrb&) *arg_0 >>= _n;

}

void _0RL_cd_c803e3f5fea6e958_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ImageOrb;
  (ImageOrb&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

// Local call call-back function.
static void
_0RL_lcfn_c803e3f5fea6e958_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c803e3f5fea6e958_00000000* tcd = (_0RL_cd_c803e3f5fea6e958_00000000*)cd;
  _impl_SceneRecServer* impl = (_impl_SceneRecServer*) svnt->_ptrToInterface(SceneRecServer::_PD_repoId);
  impl->newInput(*tcd->arg_0);


}

void _objref_SceneRecServer::newInput(const ImageOrb& img)
{
  _0RL_cd_c803e3f5fea6e958_00000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_10000000, "newInput", 9);
  _call_desc.arg_0 = &(ImageOrb&) img;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cshort
class _0RL_cd_c803e3f5fea6e958_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c803e3f5fea6e958_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  ::CORBA::Short result;
};

void _0RL_cd_c803e3f5fea6e958_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_c803e3f5fea6e958_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_c803e3f5fea6e958_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c803e3f5fea6e958_20000000* tcd = (_0RL_cd_c803e3f5fea6e958_20000000*)cd;
  _impl_SceneRecServer* impl = (_impl_SceneRecServer*) svnt->_ptrToInterface(SceneRecServer::_PD_repoId);
  tcd->result = impl->outputReady();


}

::CORBA::Short _objref_SceneRecServer::outputReady()
{
  _0RL_cd_c803e3f5fea6e958_20000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_30000000, "outputReady", 12);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cshort_o_cPoint2DOrb
class _0RL_cd_c803e3f5fea6e958_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c803e3f5fea6e958_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }


  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  Point2DOrb arg_0_;
  Point2DOrb* arg_0;
  ::CORBA::Short result;
};

void _0RL_cd_c803e3f5fea6e958_40000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const Point2DOrb&) *arg_0 >>= _n;

}

void _0RL_cd_c803e3f5fea6e958_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Short&)result <<= _n;
  (Point2DOrb&)*arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_c803e3f5fea6e958_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c803e3f5fea6e958_40000000* tcd = (_0RL_cd_c803e3f5fea6e958_40000000*)cd;
  _impl_SceneRecServer* impl = (_impl_SceneRecServer*) svnt->_ptrToInterface(SceneRecServer::_PD_repoId);
  tcd->result = impl->getLandmarkLoc(*tcd->arg_0);


}

::CORBA::Short _objref_SceneRecServer::getLandmarkLoc(Point2DOrb& loc)
{
  _0RL_cd_c803e3f5fea6e958_40000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_50000000, "getLandmarkLoc", 15);
  _call_desc.arg_0 = &(Point2DOrb&) loc;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cImageOrb_i_cPoint2DOrb_i_cDimsOrb_i_cshort
class _0RL_cd_c803e3f5fea6e958_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c803e3f5fea6e958_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);



  ImageOrb_var arg_0_;
  const ImageOrb* arg_0;
  Point2DOrb arg_1_;
  const Point2DOrb* arg_1;
  DimsOrb arg_2_;
  const DimsOrb* arg_2;
  ::CORBA::Short arg_3;
};

void _0RL_cd_c803e3f5fea6e958_60000000::marshalArguments(cdrStream& _n)
{
  (const ImageOrb&) *arg_0 >>= _n;
  (const Point2DOrb&) *arg_1 >>= _n;
  (const DimsOrb&) *arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_c803e3f5fea6e958_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ImageOrb;
  (ImageOrb&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  (Point2DOrb&)arg_1_ <<= _n;
  arg_1 = &arg_1_;
  (DimsOrb&)arg_2_ <<= _n;
  arg_2 = &arg_2_;
  (::CORBA::Short&)arg_3 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_c803e3f5fea6e958_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c803e3f5fea6e958_60000000* tcd = (_0RL_cd_c803e3f5fea6e958_60000000*)cd;
  _impl_SceneRecServer* impl = (_impl_SceneRecServer*) svnt->_ptrToInterface(SceneRecServer::_PD_repoId);
  impl->trainFeature(*tcd->arg_0, *tcd->arg_1, *tcd->arg_2, tcd->arg_3);


}

void _objref_SceneRecServer::trainFeature(const ImageOrb& img, const Point2DOrb& loc, const DimsOrb& window, ::CORBA::Short leg)
{
  _0RL_cd_c803e3f5fea6e958_60000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_70000000, "trainFeature", 13);
  _call_desc.arg_0 = &(ImageOrb&) img;
  _call_desc.arg_1 = &(Point2DOrb&) loc;
  _call_desc.arg_2 = &(DimsOrb&) window;
  _call_desc.arg_3 = leg;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_c803e3f5fea6e958_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c803e3f5fea6e958_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }





};

// Local call call-back function.
static void
_0RL_lcfn_c803e3f5fea6e958_90000000(omniCallDescriptor*, omniServant* svnt)
{

  _impl_SceneRecServer* impl = (_impl_SceneRecServer*) svnt->_ptrToInterface(SceneRecServer::_PD_repoId);
  impl->shutdown();


}

void _objref_SceneRecServer::shutdown()
{
  _0RL_cd_c803e3f5fea6e958_80000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_90000000, "shutdown", 9);


  _invoke(_call_desc);



}
_pof_SceneRecServer::~_pof_SceneRecServer() {}


omniObjRef*
_pof_SceneRecServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_SceneRecServer(ior, id);
}


::CORBA::Boolean
_pof_SceneRecServer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::SceneRecServer::_PD_repoId) )
    return 1;

  return 0;
}

const _pof_SceneRecServer _the_pof_SceneRecServer;

_impl_SceneRecServer::~_impl_SceneRecServer() {}


::CORBA::Boolean
_impl_SceneRecServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "newInput") ) {

    _0RL_cd_c803e3f5fea6e958_00000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_10000000, "newInput", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "outputReady") ) {

    _0RL_cd_c803e3f5fea6e958_20000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_30000000, "outputReady", 12, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLandmarkLoc") ) {

    _0RL_cd_c803e3f5fea6e958_40000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_50000000, "getLandmarkLoc", 15, 1);
    _call_desc.arg_0 = &_call_desc.arg_0_;
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "trainFeature") ) {

    _0RL_cd_c803e3f5fea6e958_60000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_70000000, "trainFeature", 13, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_c803e3f5fea6e958_80000000 _call_desc(_0RL_lcfn_c803e3f5fea6e958_90000000, "shutdown", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_SceneRecServer::_ptrToInterface(const char* id)
{
  if( id == ::SceneRecServer::_PD_repoId )
    return (::_impl_SceneRecServer*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::SceneRecServer::_PD_repoId) )
    return (::_impl_SceneRecServer*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_SceneRecServer::_mostDerivedRepoId()
{
  return ::SceneRecServer::_PD_repoId;
}

POA_SceneRecServer::~POA_SceneRecServer() {}

