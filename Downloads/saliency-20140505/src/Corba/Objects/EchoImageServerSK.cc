// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "EchoImageServerSK.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



EchoImageServer_ptr EchoImageServer_Helper::_nil() {
  return ::EchoImageServer::_nil();
}

::CORBA::Boolean EchoImageServer_Helper::is_nil(::EchoImageServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void EchoImageServer_Helper::release(::EchoImageServer_ptr p) {
  ::CORBA::release(p);
}

void EchoImageServer_Helper::marshalObjRef(::EchoImageServer_ptr obj, cdrStream& s) {
  ::EchoImageServer::_marshalObjRef(obj, s);
}

EchoImageServer_ptr EchoImageServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::EchoImageServer::_unmarshalObjRef(s);
}

void EchoImageServer_Helper::duplicate(::EchoImageServer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

EchoImageServer_ptr
EchoImageServer::_duplicate(::EchoImageServer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

EchoImageServer_ptr
EchoImageServer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


EchoImageServer_ptr
EchoImageServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

EchoImageServer_ptr
EchoImageServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_EchoImageServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_EchoImageServer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_EchoImageServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* EchoImageServer::_PD_repoId = "IDL:EchoImageServer:1.0";


_objref_EchoImageServer::~_objref_EchoImageServer() {

}


_objref_EchoImageServer::_objref_EchoImageServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::EchoImageServer::_PD_repoId, ior, id, 1)


{
  _PR_setobj(this);
}

void*
_objref_EchoImageServer::_ptrToObjRef(const char* id)
{
  if( id == ::EchoImageServer::_PD_repoId )
    return (::EchoImageServer_ptr) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::EchoImageServer::_PD_repoId) )
    return (::EchoImageServer_ptr) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cImageOrb_i_cImageOrb
class _0RL_cd_97112014c61d6e2e_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_97112014c61d6e2e_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }

  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);


  ImageOrb_var arg_0_;
  const ImageOrb* arg_0;
  ImageOrb_var result;
};

void _0RL_cd_97112014c61d6e2e_00000000::marshalArguments(cdrStream& _n)
{
  (const ImageOrb&) *arg_0 >>= _n;

}

void _0RL_cd_97112014c61d6e2e_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ImageOrb;
  (ImageOrb&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_97112014c61d6e2e_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const ImageOrb&) result >>= _n;

}

void _0RL_cd_97112014c61d6e2e_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ImageOrb;
  (ImageOrb&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_97112014c61d6e2e_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_97112014c61d6e2e_00000000* tcd = (_0RL_cd_97112014c61d6e2e_00000000*)cd;
  _impl_EchoImageServer* impl = (_impl_EchoImageServer*) svnt->_ptrToInterface(EchoImageServer::_PD_repoId);
  tcd->result = impl->echo(*tcd->arg_0);


}

ImageOrb* _objref_EchoImageServer::echo(const ImageOrb& img)
{
  _0RL_cd_97112014c61d6e2e_00000000 _call_desc(_0RL_lcfn_97112014c61d6e2e_10000000, "echo", 5);
  _call_desc.arg_0 = &(ImageOrb&) img;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_97112014c61d6e2e_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_97112014c61d6e2e_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {

  }





};

// Local call call-back function.
static void
_0RL_lcfn_97112014c61d6e2e_30000000(omniCallDescriptor*, omniServant* svnt)
{

  _impl_EchoImageServer* impl = (_impl_EchoImageServer*) svnt->_ptrToInterface(EchoImageServer::_PD_repoId);
  impl->shutdown();


}

void _objref_EchoImageServer::shutdown()
{
  _0RL_cd_97112014c61d6e2e_20000000 _call_desc(_0RL_lcfn_97112014c61d6e2e_30000000, "shutdown", 9);


  _invoke(_call_desc);



}
_pof_EchoImageServer::~_pof_EchoImageServer() {}


omniObjRef*
_pof_EchoImageServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_EchoImageServer(ior, id);
}


::CORBA::Boolean
_pof_EchoImageServer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::EchoImageServer::_PD_repoId) )
    return 1;

  return 0;
}

const _pof_EchoImageServer _the_pof_EchoImageServer;

_impl_EchoImageServer::~_impl_EchoImageServer() {}


::CORBA::Boolean
_impl_EchoImageServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "echo") ) {

    _0RL_cd_97112014c61d6e2e_00000000 _call_desc(_0RL_lcfn_97112014c61d6e2e_10000000, "echo", 5, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_97112014c61d6e2e_20000000 _call_desc(_0RL_lcfn_97112014c61d6e2e_30000000, "shutdown", 9, 1);

    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_EchoImageServer::_ptrToInterface(const char* id)
{
  if( id == ::EchoImageServer::_PD_repoId )
    return (::_impl_EchoImageServer*) this;

  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::EchoImageServer::_PD_repoId) )
    return (::_impl_EchoImageServer*) this;

  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_EchoImageServer::_mostDerivedRepoId()
{
  return ::EchoImageServer::_PD_repoId;
}

POA_EchoImageServer::~POA_EchoImageServer() {}

