#
# Makefile.local -- some extras for building Robolocust programs
#
# NOTE: Copy this file to the saliency root directory for building lobot
# related programs. It should not be checked in from there! In the
# saliency root directory, this file is an unversioned object and local
# to the SVN working copy. Any changes required to this file should be
# made to the versioned copy under the src/Robots/LoBot directory and
# then copied to the saliency root directory.
#
# COMMENTARY:
# -----------
# Currently, lex and yacc are not integrated into the INVT build
# toolchain. This makefile (which is included by the main INVT makefile)
# defines appropriate rules to ensure that lex and yacc get called
# properly when required.
#
# The lobot programs use lex and yacc for parsing the Robolocust
# configuration file. See src/Robots/LoBot/config/LoIniFileLexer.l and
# src/Robots/LoBot/config/LoIniFileParser.y for the details.
#

# Primary maintainer for this file: mviswana usc edu
# $HeadURL: svn://isvn.usc.edu/software/invt/trunk/saliency/src/Robots/LoBot/Makefile.local $
# $Id: Makefile.local 13560 2010-06-11 12:58:57Z mviswana $

# Rule for generating the C++ code for the lexer from a lex
# specification. This C++ module will be built into a corresponding
# object file with the usual %.o:%.C pattern rule defined in the main
# makefile.
#
# NOTE: Explicit reliance on flex rather than POSIX or AT&T lex.
LEX    = flex
LFLAGS =

%.C : %.l
	${COMPILE1} "Generating lexer from     " $<
	${COMPILE4} ${LEX} ${LFLAGS} --outfile=$@ $<
	${COMPILE3}

# Rule for generating the C++ code for the parser from a yacc grammar.
# As for the lexer, the generated C++ module will be converted into an
# object file with the usual %.o:%.C pattern rule defined in the main
# makefile.
#
# NOTE: Explicit reliance on GNU bison rather than yacc.
YACC   = bison
YFLAGS =

%.C : %.y
	${COMPILE1} "Generating parser from    " $<
	${COMPILE4} ${YACC} ${YFLAGS} --output-file=$@ --defines=$*.H $<
	${COMPILE3}

# Robolocust source and object file directories
LOSRC = src/Robots/LoBot
LOOBJ = build/obj/Robots/LoBot
LOBIN = ${prefix}/bin

# Since the INVT dependency calculator doesn't (yet) work with lex and
# yacc, we need to explicitly specify the make dependencies for the C++
# modules generated by lex and yacc for the lobot config file parsing
# functionality.
${LOSRC}/config/LoIniFileLexer.C: \
   ${LOSRC}/config/LoIniFileLexer.l ${LOSRC}/config/LoIniFileParser.C \
   ${LOSRC}/config/LoLexYaccDefs.H

# For the yacc module, we have to specify not only the dependencies but
# also the build commands. Relying on the above %.C:%.y pattern rule is
# a bit dicey because yacc generates both a .C file and a .H file and
# using it results in invoking yacc twice (once for each file). This
# results in bison complaining about possibly conflicting code being
# generated for these two files. To be safe, we explicitly supply the
# same yacc build commands here as well so that it is called only once
# and doesn't result in any complaints from bison.
#
# NOTE: Umm, this doesn't always work! Particularly in a completely
# clean or fresh build. yacc still complains about conflicting output;
# but things seem to work okay. And the complaints go away after the
# second or third iteration. Not sure what's going on here...
${LOSRC}/config/LoIniFileParser.C: \
   ${LOSRC}/config/LoIniFileParser.y ${LOSRC}/config/LoConfig.H \
   ${LOSRC}/config/LoLexYaccDefs.H
	${COMPILE1} "Generating parser from    " $<
	${COMPILE4} ${YACC} ${YFLAGS} --output-file=$@ --defines=$*.H $<
	${COMPILE3}

# The lobot programs need to link with the INI file lexer and parser
# modules generated by lex and yacc. However, the INVT dependency
# calculator does not (yet) support lex and yacc. As a result, the
# make dependency rules it writes for the lobot programs do not include
# the lex and yacc generated modules in the prerequisites list, which
# causes the link step to fail with complaints about not being able to
# find the yyparse function and other such lex/yacc related things.
#
# The following rule adds the lex/yacc modules to the dependency list
# for the lobot programs to allow the linker to resolve references to
# yyparse, etc.
${LOBIN}/lobot ${LOBIN}/lograb ${LOBIN}/lolaser: \
   ${LOOBJ}/config/LoIniFileLexer.so ${LOOBJ}/config/LoIniFileParser.so

# The Robolocust controller consists of two parts: the high-level C++
# layers running on a netbook/laptop/mini-ITX computer and a low-level
# control program running on the robot's microcontroller (on the iRobot
# Create, that would be the Command Module).
#
# The low-level control program is built separately from the high-level
# C++ codebase (which is part of the saliency toolkit). The following
# rule adds the necessary build instructions for the low-level control
# program to the saliency build system so that we can build both the
# high- and low-level portions of the Robolocust controller with a single
# command instead of having to constantly switch back and forth between
# the two different build regimes.
#
# NOTE: The low-level controller for the iRobot Create Command Module
# requires the avr-gcc toolchain. We check for the existence of the
# avr-gcc compiler here before making the low-level controller.
lobot:
	@if test -x /usr/bin/avr-gcc ; then   \
	    cd ${LOSRC}/irccm && ${MAKE} hex ;\
	fi

# This rule cleans the low-level portion of the Robolocust controller
loclean:
	cd ${LOSRC}/irccm && ${MAKE} clean

# This rule hooks the low-level contoller's clean target (defined in the
# rule above) into the high-level build system.
clean: loclean
