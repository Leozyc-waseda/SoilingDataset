// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SalGlasses_hh__
#define __SalGlasses_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif



#ifndef __ImageOrb_hh_EXTERNAL_GUARD__
#define __ImageOrb_hh_EXTERNAL_GUARD__
#include <ImageOrb.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





class CmdData_var;

class CmdData : public _CORBA_Unbounded_Sequence_Octet {
public:
  typedef CmdData_var _var_type;
  inline CmdData() {}
  inline CmdData(const CmdData& _s)
    : _CORBA_Unbounded_Sequence_Octet(_s) {}

  inline CmdData(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_Octet(_max) {}
  inline CmdData(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Octet* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}



  inline CmdData& operator = (const CmdData& _s) {
    _CORBA_Unbounded_Sequence_Octet::operator=(_s);
    return *this;
  }
};

class CmdData_out;

class CmdData_var {
public:
  inline CmdData_var() : _pd_seq(0) {}
  inline CmdData_var(CmdData* _s) : _pd_seq(_s) {}
  inline CmdData_var(const CmdData_var& _s) {
    if( _s._pd_seq )  _pd_seq = new CmdData(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~CmdData_var() { if( _pd_seq )  delete _pd_seq; }

  inline CmdData_var& operator = (CmdData* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline CmdData_var& operator = (const CmdData_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new CmdData;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline CORBA::Octet& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline CmdData* operator -> () { return _pd_seq; }
  inline const CmdData* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator CmdData& () const { return *_pd_seq; }
#else
  inline operator const CmdData& () const { return *_pd_seq; }
  inline operator CmdData& () { return *_pd_seq; }
#endif

  inline const CmdData& in() const { return *_pd_seq; }
  inline CmdData&       inout()    { return *_pd_seq; }
  inline CmdData*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline CmdData* _retn() { CmdData* tmp = _pd_seq; _pd_seq = 0; return tmp; }

  friend class CmdData_out;

private:
  CmdData* _pd_seq;
};

class CmdData_out {
public:
  inline CmdData_out(CmdData*& _s) : _data(_s) { _data = 0; }
  inline CmdData_out(CmdData_var& _s)
    : _data(_s._pd_seq) { _s = (CmdData*) 0; }
  inline CmdData_out(const CmdData_out& _s) : _data(_s._data) {}
  inline CmdData_out& operator = (const CmdData_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline CmdData_out& operator = (CmdData* _s) {
    _data = _s;
    return *this;
  }
  inline operator CmdData*&()  { return _data; }
  inline CmdData*& ptr()       { return _data; }
  inline CmdData* operator->() { return _data; }

  inline CORBA::Octet& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  CmdData*& _data;

private:
  CmdData_out();
  CmdData_out& operator=(const CmdData_var&);
};

#ifndef __SalGlasses__
#define __SalGlasses__

class SalGlasses;
class _objref_SalGlasses;
class _impl_SalGlasses;

typedef _objref_SalGlasses* SalGlasses_ptr;
typedef SalGlasses_ptr SalGlassesRef;

class SalGlasses_Helper {
public:
  typedef SalGlasses_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_SalGlasses, SalGlasses_Helper> SalGlasses_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_SalGlasses,SalGlasses_Helper > SalGlasses_out;

#endif

// interface SalGlasses
class SalGlasses {
public:
  // Declarations for this interface type.
  typedef SalGlasses_ptr _ptr_type;
  typedef SalGlasses_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(CORBA::Object_ptr);

  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.

};

class _objref_SalGlasses :
  public virtual CORBA::Object,
  public virtual omniObjRef
{
public:
  void init();
  ImageOrb* getImageSensor(CORBA::Short i);
  void getImageSensorDims(CORBA::Short& w, CORBA::Short& h, CORBA::Short i);
  ImageOrb* getSaliencyMap(CORBA::Short i);
  void getWinner(CORBA::Short& x, CORBA::Short& y);
  CORBA::Short getSensorValue(CORBA::Short i);
  void shutdown();

  inline _objref_SalGlasses()  { _PR_setobj(0); }  // nil
  _objref_SalGlasses(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_SalGlasses();


private:
  virtual void* _ptrToObjRef(const char*);

  _objref_SalGlasses(const _objref_SalGlasses&);
  _objref_SalGlasses& operator = (const _objref_SalGlasses&);
  // not implemented

  friend class SalGlasses;
};

class _pof_SalGlasses : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_SalGlasses() : _OMNI_NS(proxyObjectFactory)(SalGlasses::_PD_repoId) {}
  virtual ~_pof_SalGlasses();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_SalGlasses :
  public virtual omniServant
{
public:
  virtual ~_impl_SalGlasses();

  virtual void init() = 0;
  virtual ImageOrb* getImageSensor(CORBA::Short i) = 0;
  virtual void getImageSensorDims(CORBA::Short& w, CORBA::Short& h, CORBA::Short i) = 0;
  virtual ImageOrb* getSaliencyMap(CORBA::Short i) = 0;
  virtual void getWinner(CORBA::Short& x, CORBA::Short& y) = 0;
  virtual CORBA::Short getSensorValue(CORBA::Short i) = 0;
  virtual void shutdown() = 0;

public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();

};




class POA_SalGlasses :
  public virtual _impl_SalGlasses,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_SalGlasses();

  inline ::SalGlasses_ptr _this() {
    return (::SalGlasses_ptr) _do_this(::SalGlasses::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr



inline void
SalGlasses::_marshalObjRef(::SalGlasses_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SalGlasses
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SalGlasses
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SalGlasses
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SalGlasses
#endif

#endif  // __SalGlasses_hh__

