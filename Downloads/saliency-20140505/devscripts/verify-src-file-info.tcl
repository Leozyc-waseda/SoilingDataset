#!/usr/bin/tclsh

# $HeadURL: svn://isvn.usc.edu/software/invt/trunk/saliency/devscripts/verify-src-file-info.tcl $
# $Id: verify-src-file-info.tcl 6795 2006-06-29 20:45:32Z rjpeters $

# Quickie script to verify that various pieces of information are
# present in source files (e.g. top-level doc comment, HeadURL and Id
# tags, etc.).

proc normalize_fname { pwd fname } {
    set fname [file normalize $fname]
    if { [string match "${pwd}/*" $fname] } {
	set fname [string range $fname [expr [string length $pwd]+1] end]
    }
    if { ![file exists $fname] } {
	error "normalize_fname gave a nonexistent file '$fname'!"
    }
    return $fname
}

proc should_skip_file { fname } {

    # let's ignore source files that are generated by other programs
    # (e.g. from qt's uic or moc, or qt's ui designer, or corba's
    # omniidl)

    if { [regexp "/ui/.*\.(h|cpp)" $fname] }      { return 1 }
    if { [regexp "/moc/.*\.(h|cpp)" $fname ] }    { return 1 }
    if { [regexp "/Qt/.*\.ui\.h" $fname] }        { return 1 }
    if { [regexp "/Corba/.*SK\.(cc|hh)" $fname] } { return 1 }
    return 0
}

set NUM_ERRORS 0
set NUM_SKIPPED 0

proc warn { msg } {
    incr ::NUM_ERRORS
    puts stderr $msg
}

proc verify_file { fname } {
    set fd [open $fname "r"]

    set line_no 0

    while { [gets $fd line] >= 0 } {
	incr line_no
	if { [regexp {^/\*. *[@\\]file ([^ ]+)} $line - docfname] } {
	    if { [info exists filedoc_line] } {
		warn "$fname has more than one '@file' doc comment:\
		      \n\t$filedoc_line\
		      \n\t${fname}:${line_no} \"$line\""
	    } else {
		set filedoc_line "${fname}:${line_no} \"$line\""

		if { ![string match "*${docfname}" $fname] } {
		    warn "$fname has a non-matching '@file doc comment:\
                          \n\t$filedoc_line"
		}
	    }
	} elseif { [regexp {^//.*\$Id.*\$$} $line] } {
	    set id_line "${fname}:${line_no} \"$line\""
	} elseif { [regexp {^//.*\$HeadURL.*\$$} $line] } {
	    set headurl_line "${fname}:${line_no} \"$line\""
	}
    }

    if { ![info exists filedoc_line] } {
	warn "$fname is missing a '@file' doc comment"
    }

    if { ![info exists id_line] } {
	warn "$fname is missing a \$Id\$ line"
    }

    if { ![info exists headurl_line] } {
	warn "$fname is missing a \$HeadURL\$ line"
    }

    close $fd
}

if { [llength $argv] == 0 } {
    puts "usage: $argv0 srcfile1 srcfile2 ..."
    exit 0
}

foreach f $argv {
    set pwd [pwd]
    if { ![should_skip_file $f] } {
	verify_file [normalize_fname $pwd $f]
    } else {
	incr ::NUM_SKIPPED
    }
}

puts stderr "$::NUM_ERRORS errors"
puts stderr "$::NUM_SKIPPED files skipped"
